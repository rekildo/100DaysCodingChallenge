Trapping Rain Water
MediumAccuracy: 33.14%Submissions: 309K+Points: 4
Lamp
This problem is part of GFG SDE Sheet. Click here to view more.  

Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. 
 

Example 1:

Input:
N = 6
arr[] = {3,0,0,2,0,4}
Output:
10
Explanation: 

Example 2:

Input:
N = 4
arr[] = {7,4,0,9}
Output:
10
Explanation:
Water trapped by above 
block of height 4 is 3 units and above 
block of height 0 is 7 units. So, the 
total unit of water trapped is 10 units.
Example 3:

Input:
N = 3
arr[] = {6,9,9}
Output:
0
Explanation:
No water will be trapped.

Your Task:
You don't need to read input or print anything. The task is to complete the function trappingWater() which takes arr[] and N as input parameters and returns the total amount of water that can be trapped.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


//source code


//{ Driver Code Starts
#include<bits/stdc++.h>

using namespace std;


// } Driver Code Ends
class Solution{

    // Function to find the trapped water between the blocks.
    public:
    long long trappingWater(int arr[], int n){

            

            int left[n];

            int right[n];

            

            int leftMax = arr[0];

            

            for(int i=0;i<n;i++){

                leftMax = max(leftMax , arr[i]);

                

                left[i] = leftMax;

            }

            

            

            int rightMax = arr[n-1];

            

            for(int i=n-1;i>=0;i--){

                rightMax = max(rightMax , arr[i]);

                

                right[i] = rightMax;

            }

            

            

            long long sum = 0;

            

            

            for(int i=0;i<n;i++){

                

                int mini = min(left[i] , right[i]);

                

                arr[i] = mini - arr[i];

                

                

                sum += arr[i];

            }

            

            

            return sum;

            

    }
};

//{ Driver Code Starts.

int main(){
    
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        
        int a[n];
        
        //adding elements to the array
        for(int i =0;i<n;i++){
            cin >> a[i];            
        }
        Solution obj;
        //calling trappingWater() function
        cout << obj.trappingWater(a, n) << endl;
        
    }
    
    return 0;
}
// } Driver Code Ends
