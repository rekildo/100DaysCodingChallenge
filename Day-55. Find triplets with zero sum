Find triplets with zero sum
BasicAccuracy: 25.81%Submissions: 201K+Points: 1
Lamp
Stand out from the crowd. Prepare with Complete Interview Preparation  

Given an array arr[] of n integers. Check whether it contains a triplet that sums up to zero. 

Example 1:

Input: n = 5, arr[] = {0, -1, 2, -3, 1}
Output: 1
Explanation: 0, -1 and 1 forms a triplet
with sum equal to 0.
Example 2:

Input: n = 3, arr[] = {1, 2, 3}
Output: 0
Explanation: No triplet with zero sum exists. 

Your Task:
You don't need to read input or print anything. Your task is to complete the boolean function findTriplets() which takes the array arr[] and the size of the array (n) as inputs and print 1 if the function returns true else print 0 if the function returns false. 

Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(1)

Constrains:
1 <= n <= 104
-106 <= Ai <= 106


//{ Driver Code Starts
#include<bits/stdc++.h>
#include<stdlib.h>
#include<iostream>
using namespace std;

// } Driver Code Ends
/* You are required to complete the function below
*  arr[]: input array
*  n: size of array
*/
class Solution{
  public:
    //Function to find triplets with zero sum.
    bool is_present(int target,int s,int e,int arr[])
  {
      //binary search for 3rd element
      while(s<=e)
      {
        //   cout<<s<<"  "<<e<<endl;
        //   cout<<"target= "<<target<<endl;
          int mid=(s+e)/2;
          if(target==arr[mid])
          {
              return true;
          }
          else if(target>arr[mid])
          {
              s=mid+1;
          }
          else if(target<arr[mid])
          {
              e=mid-1;
          }
      }
      return false;
  }
    //Function to find triplets with zero sum.
    bool findTriplets(int arr[], int n)
    { 
        //Your code here
        
        //first sort and then select two and do binary search for one
        
        //nlogn+n2(logn)
        
        sort(arr,arr+n);
        for(int i=0;i<n-2;i++)
        {
            //this saves time for repeting value, same calculation again
            if(i-1>=0&&arr[i]==arr[i-1])
            {
                continue;
            }
            for(int j=i+1;j<n-1;j++)
            {
                if(j-1>=1&&arr[j]==arr[j-1])
            {
                continue;
            }
                int sum=arr[i]+arr[j];
                //here passing -sum which will be the target that is 3rd element
                //if we get that element that means we got triplet that sum to zero
                if(is_present(-sum,j+1,n-1,arr))
                {
                    return true;
                }
            }
        }
        return false;
    }
};

//{ Driver Code Starts.
int main()
{
    int t;
	cin>>t;
	while(t--){
    	int n;
    	cin>>n;
    	int arr[n]={0};
    	for(int i=0;i<n;i++)
    		cin>>arr[i];
    	Solution obj;
        if(obj.findTriplets(arr, n))
            cout<<"1"<<endl;
        else 
            cout<<"0"<<endl;
	}
    return 0;
}
// } Driver Code Ends
