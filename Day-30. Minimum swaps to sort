Minimum Swaps to Sort
MediumAccuracy: 38.39%Submissions: 118K+Points: 4
Lamp
This problem is part of GFG SDE Sheet. Click here to view more.  

Given an array of n distinct elements. Find the minimum number of swaps required to sort the array in strictly increasing order.


Example 1:

Input:
nums = {2, 8, 5, 4}
Output:
1
Explaination:
swap 8 with 4.
Example 2:

Input:
nums = {10, 19, 6, 3, 5}
Output:
2
Explaination:
swap 10 with 3 and swap 19 with 5.

Your Task:
You do not need to read input or print anything. Your task is to complete the function minSwaps() which takes the nums as input parameter and returns an integer denoting the minimum number of swaps required to sort the array. If the array is already sorted, return 0. 


Expected Time Complexity: O(nlogn)
Expected Auxiliary Space: O(n)


Constraints:
1 ≤ n ≤ 105
1 ≤ numsi ≤ 106


//source code


//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution 
{
    public:
    //Function to find the minimum number of swaps required to sort the array. 
	int minSwaps(vector<int>&nums)
	{
	    vector<int> dup =  nums; //duplicate vector // space= O(n)

     sort( dup.begin(), dup.end() ); //TC: nlog(n)

     unordered_map<int, int> ump;

     

     //deleting  elements from dup and adding to map so that space stays as O(n);

     int i = dup.size()-1 ;

     while( dup.size()!=0 ){

     ump.insert({dup[i],i});

     dup.pop_back();

     i--;

    }

    

    int count = 0;

    int j = 0;

       //correcting position of elements

       while( j < nums.size() ){

       int oi =j ;//orignal index

       int ci = ump[nums[j]]; //correct index    

      if( ci == oi){

          j++;

          continue;

      }

      count += 1;

      swap(nums[j],nums[ci]);

       }

       return count;

 }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<int>nums(n);
		for(int i = 0; i < n; i++)
			cin >> nums[i];
		Solution obj;
		int ans = obj.minSwaps(nums);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
